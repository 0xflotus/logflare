<div class="subhead">
  <div class="container mx-auto">
    <div class="log-settings float-right">
      <ul>
        <li><a href="javascript:dateSwap();"><span id="swap-date"><i class="fa fa-toggle-off pointer-cursor" aria-hidden="true"></i></span> <span class="hide-on-mobile">local time</span></a></li>
        <li><a href="https://twitter.com/intent/tweet?text=%40chasers%20help%21"><i class="fas fa-question-circle"></i> <span class="hide-on-mobile">help</a></span></li>
      </ul>
    </div>
    <h5>~/logs/<span class="text-primary"><%= @source.name %></h5>
  </div>
</div>

<div class="container mx-auto" id="console-text">
<div>
<ul class="list-unstyled console-text-list">
  <%= for log <- @logs do %>
    <li>
      <mark class="log-datestamp"><%= log.timestamp %></mark> <%= log.log_message %>
    </li>
  <% end %>
</ul>
</div>

<div id="no-logs-warning">
  <%= if @logs == [] do %>
  <h4>No logs ... add some logs!</h4>
  <div class="clearfix">
    <h6>With a Cloudflare Worker</h6>
    <textarea class="copyable-code" name="curl-code" id="worker-code" wrap="off">
      async function handleRequest(request) {
        const rMeth = request.method
        const rUrl = request.url
        const uAgent = request.headers.get("user-agent")
        const cfRay = request.headers.get("cf-ray")

        const sourceKey = "<%= @source.token %>"
        const apiKey = "<%= @user.api_key %>"

        const response = await fetch(request)

        const statusCode = response.status
        const contentLength = response.headers.get("content-legth")

        const logEntry = `${rMeth} | ${statusCode} | ${cfRay} | ${rUrl} | ${uAgent}`

        const init = {
          method: "POST",
          headers: { "X-API-KEY": apiKey, "Content-Type": "application/json" },
          body: JSON.stringify({ source: sourceKey, log_entry: logEntry }),
        }

        const logflare = await fetch("https://logflare.app/api/logs", init)

        return response
      }

      addEventListener("fetch", event => {
        event.respondWith(handleRequest(event.request))
      })
    </textarea>
    <button class="btn btn-primary btn-sm float-right" onclick="copyCode(`worker-code`, `Copied worker!`)">Copy Worker Code</button>
  </div>
  <div class="clearfix">
    <h6>With an API Request</h6>
    <textarea class="copyable-code" name="curl-code" id="curl-code" wrap="off">
      curl -X "POST" "https://logflare.app/api/logs" \
        -H 'Content-Type: application/json' \
        -H 'X-API-KEY: <%= @user.api_key %>' \
        -d $'{
          "source": "<%= @source.token %>",
          "log_entry": "This is another log message."
        }'
      </textarea>
      <button class="btn btn-primary btn-sm float-right" onclick="copyCode(`curl-code`, `Copied command!`)">Copy Command</button>
  </div>
  <% end %>
</div>


<script>
  window.localTime = false;

  document.addEventListener("DOMContentLoaded", function(){
    window.createSocket("<%= @source.token %>");
    dateAdd();
    dateSwap();
    setScroll();
  });

  document.getElementById("console-text").addEventListener("scroll", function(){
     resetScrollTracker();
   });

  function setScroll(){
    var console_text = document.getElementById("console-text");

    console_text.scrollTop = console_text.scrollHeight;
  }

  function stayScrolledBottom() {
    var console_text = document.getElementById("console-text");

    if (window.scrollTracker == true) {
      console_text.scrollTop = console_text.scrollHeight;
    };
  }

  function resetScrollTracker() {
    var console_text = document.getElementById("console-text");

    switch (console_text.scrollHeight - console_text.scrollTop == console_text.clientHeight) {
      case true:
        window.scrollTracker = true;
        // console.log("scrolled to the bottom");
      break;
      case false:
        window.scrollTracker = false;
    };
  }

  function dateSwap() {
    window.localTime = ! window.localTime
    document.getElementById("swap-date").innerHTML = timeToggle(window.localTime);

    var utcs = document.getElementsByClassName("utc");

    for (var i = 0; i < utcs.length; i++) {
      utcs[i].classList.toggle("d-none");
    };

    var local_times = document.getElementsByClassName("local-time");

    for (var i = 0; i < local_times.length; i++) {
      local_times[i].classList.toggle("d-none");
    };
  }

  function dateAdd() {
    switch (window.localTime) {
      case true:
        var timestamps = document.getElementsByClassName("log-datestamp");

        for (var i = 0; i < timestamps.length; i++) {
          time = timestamps[i];
          local_time = formatLocalTime(time.innerHTML / 1000);
          utc_time = time.innerHTML
          timestamps[i].innerHTML = `<span class="local-time">${local_time}</span><span class="utc d-none">${utc_time}</span>`;
          };
      break;
      case false:
        var timestamps = document.getElementsByClassName("log-datestamp");

        for (var i = 0; i < timestamps.length; i++) {
          time = timestamps[i];
          local_time = formatLocalTime(time.innerHTML / 1000);
          utc_time = time.innerHTML
          timestamps[i].innerHTML = `<span class="local-time d-none">${local_time}</span><span class="utc">${utc_time}</span>`;
          };
    };
  }

  function dateAddNew() {
    var timestamps = document.getElementsByClassName("new-log");
    var last = timestamps[timestamps.length - 1];
    local_time = formatLocalTime(last.innerHTML / 1000);
    utc_time = last.innerHTML

    switch (window.localTime) {
      case true:
      last.innerHTML = `<span class="local-time">${local_time}</span><span class="utc d-none">${utc_time}</span>`;
      break;
      case false:
      last.innerHTML = `<span class="local-time d-none">${local_time}</span><span class="utc">${utc_time}</span>`;
    };
  }

  function timeToggle(bool) {
    switch (bool) {
      case true:
        return `<span id="swap-date"><i class="fa fa-toggle-on pointer-cursor" aria-hidden="true"></i></span>`;
      break;
      case false:
        return `<span id="swap-date"><i class="fa fa-toggle-off pointer-cursor" aria-hidden="true"></i></span>`;
    };
  }

  function formatLocalTime(date) {
    return dateFns.format(date, 'ddd MMM D YYYY hh:mm:ssa')
  }

  function copyCode(id, alert_message) {
    var copyText = document.getElementById(id);
    copyText.select();
    document.execCommand("copy");
    alert(alert_message);
  }

</script>
</div>
