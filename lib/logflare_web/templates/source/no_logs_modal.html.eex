<div class="modal fade bd-example-modal-lg" id="sourceHelpModal" tabindex="-1" role="dialog" aria-labelledby="sourceHelpModal" aria-hidden="true">
  <div class="modal-dialog modal-lg" role="document">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="sourceHelpModalLabel">Send Logs to this Source</h5>
        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
          <span aria-hidden="true">&times;</span>
        </button>
      </div>
      <div class="modal-body">
        <h5 class="header-margin">Source ID</h5>
        <p>You'll need this source ID for some integrations or libraries.</p>
        <span class="pointer-cursor logflare-tooltip" id="source-id" data-toggle="tooltip" data-html=true data-placement="top" title="<span id=copy-tooltip>Copy this</span>" data-clipboard-text="<%= @source.token %>"><code><%= @source.token %></code> <i class="fas fa-copy"></i></span>
        <h5 class="header-margin">With the Cloudflare App</h5>
        <p>Already on Cloudflare? Install the Cloudflare app and start sending logs now.</p>
        <iframe src="https://install.cloudflareapps.com?appId=K4MXdgCp7956" allowtransparency="true" scroll="no" frameborder="0" style="height: 48px; width: 180px">
        </iframe>
        <h5 class="header-margin">With Elixir Logger</h5>
        <p>Using Elixir? Use our Logger backend to send your structured logs.</p>
        <%= link "Setup the Logger backend", to: "https://github.com/Logflare/logflare_logger_backend", class: "btn btn-primary form-button", target: "_blank" %>
        <h5 class="header-margin">With the Elixir Agent</h5>
        <p>Watch log files on a server with our Elixir agent.</p>
        <%= link "Install the agent", to: "https://github.com/Logflare/logflare-agent", class: "btn btn-primary form-button", target: "_blank" %>
        <h5 class="header-margin">For Javascript Projects</h5>
        <p>Use our official Pino transport to send log events from your Javascript project.</p>
        <%= link "Setup the Pino transport", to: "https://github.com/Logflare/pino-logflare", class: "btn btn-primary form-button", target: "_blank" %>
        <h5 class="header-margin">From a Generic Webhook</h5>
        <p>Use the generic JSON ingeset endpoint to generate log events from an external webhook.</p>
        <p>e.g. you can set a Github webhook to send events to:</p>
        <pre class="pre-scrollable">
          <code>
    https://api.logflare.app/logs/json?api_key=<%= if @user do @user.api_key else "SIGN_IN_FIRST" end %>&source=<%= @source.token %></code>
        </pre>
        <p>Or send generic JSON events yourself.</p>
        <pre class="pre-scrollable">
          <code>
    curl -X "POST" "https://api.logflare.app/logs/json?api_key=<%= if @user do @user.api_key else "SIGN_IN_FIRST" end %>&source=<%= @source.token %>" \
         -H 'Content-Type: application/json; charset=utf-8' \
         -d $'[
      {
        "yellow": true,
        "tags": [
          "popular, tropical, organic"
        ],
        "store": {
          "state": "AZ",
          "city": "Phoenix",
          "zip": 85016,
          "address": "123 W Main St"
        },
        "type": "fruit",
        "name": "banana",
        "qty": 12
      }
    ]'
          </code>
        </pre>
        <h5 class="header-margin">With an API Request</h5>
        <p>Send logs via an HTTP request. This request body payload lets you send over a human readable event message in the <code>log_entry</code> field.</p>
        <pre class="pre-scrollable">
          <code>
    curl -X "POST" "https://api.logflare.app/logs?api_key=<%= if @user do @user.api_key else "SIGN_IN_FIRST" end %>&source=<%= @source.token %>" \
    -H 'Content-Type: application/json' \
    -d $'{
      "log_entry": "This is another log message.",
      "metadata": {
        "ip_address": "100.100.100.100",
        "request_method": "POST",
        "custom_user_data": {
          "vip": true,
          "id": 38,
          "login_count": 154,
          "company": "Apple",
          "address": {
            "zip": "11111",
            "st": "NY",
            "street": "123 W Main St",
            "city": "New York"
          }
        },
        "datacenter": "aws",
        "request_headers": {
          "connection": "close",
          "user_agent": "chrome"
        }
      }
    }'
          </code>
        </pre>
        <h5 class="header-margin">With a Custom Cloudflare Worker</h5>
        <p>Customize the Cloudflare worker using the template below.</p>
        <pre class="pre-scrollable">
          <code>
    const makeid = length => {
        let text = ""
        const possible = "ABCDEFGHIJKLMNPQRSTUVWXYZ0123456789"
        for (let i = 0; i < length; i += 1) {
            text += possible.charAt(Math.floor(Math.random() * possible.length))
        }
        return text
    }

    const buildMetadataFromHeaders = headers => {
        const responseMetadata = {}
        Array.from(headers).forEach(([key, value]) => {
            responseMetadata[key.replace(/-/g, "_")] = value
        })
        return responseMetadata
    }

    const WORKER_ID = makeid(6)

    async function handleRequest(event) {
        const {
            request
        } = event;
        const rMeth = request.method
        const rUrl = request.url
        const uAgent = request.headers.get("user-agent")
        const rHost = request.headers.get("host")
        const cfRay = request.headers.get("cf-ray")
        const cIP = request.headers.get("cf-connecting-ip")
        const rCf = request.cf

        const requestMetadata = buildMetadataFromHeaders(request.headers)

        const sourceKey = "<%= @source.token %>"
        const apiKey = "<%= if @user do @user.api_key else "SIGN IN FIRST" end %>"

        const t1 = Date.now()
        const response = await fetch(request)
        const originTimeMs = Date.now() - t1

        const statusCode = response.status

        const responseMetadata = buildMetadataFromHeaders(response.headers)

        const logEntry = `${rMeth} | ${statusCode} | ${cIP} | ${cfRay} | ${rUrl} | ${uAgent}`

        const logflareEventBody = {
            source: sourceKey,
            log_entry: logEntry,
            metadata: {
                response: {
                    headers: responseMetadata,
                    origin_time: originTimeMs,
                    status_code: response.status,
                },
                request: {
                    url: rUrl,
                    method: rMeth,
                    headers: requestMetadata,
                    cf: rCf,
                },
                logflare_worker: {
                    worker_id: WORKER_ID,
                },
            },
        }

        const init = {
            method: "POST",
            headers: {
                "X-API-KEY": apiKey,
                "Content-Type": "application/json",
                "User-Agent": `Cloudflare Worker via ${rHost}`
            },
            body: JSON.stringify(logflareEventBody),
        }

        event.waitUntil(fetch("https://api.logflare.app/logs", init))

        return response
    }

    addEventListener("fetch", event => {
        event.passThroughOnException()

        event.respondWith(handleRequest(event))
    })
          </code>
        </pre>
      </div>
    </div>
  </div>
</div>
